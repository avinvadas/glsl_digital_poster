{"id":"js/shaders/shader01_frgmt.glsl","dependencies":[{"name":"/Users/avinvadas/Documents/code projects/digital_poster_test/package.json","includedInParent":true,"mtime":1646402075729}],"generated":{"js":"module.exports = \"#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n#define PI 3.14159265359;\\nuniform vec2 u_resolution;\\nuniform vec2 u_mouse;\\nuniform float u_time;\\n\\nuniform float u_grid_column_width;\\nuniform vec3 u_color_primary;\\nuniform float u_shader_speed;\\n\\nfloat plot(vec2 st, float pct, float volume){\\n  return  smoothstep( pct-volume, pct, 0.25) -\\n          smoothstep( pct, pct+volume, 0.25);\\n}\\n\\nvoid main() {\\n\\n    vec2 st = gl_FragCoord.xy/u_resolution;\\n    vec2 mouse = u_mouse/u_resolution;\\n    float shader_speed = u_shader_speed *0.1;\\n    float column_width = u_grid_column_width;\\n    //convert hexdecimal to hsl:\\n\\n    // draw a circle\\n    float d = distance((0.5-mouse)/st,vec2(0.5));\\n    // Smooth interpolation between 0.1 and 0.9\\n    float y = smoothstep(0.2,0.8,st.x);\\n    vec3 color = vec3(0.);\\n    float volume = 0.5 + \\n    (atan((st.x))* cos(u_time *.0025)+0.025)*\\n     atan(st.y)* 4.0\\n     +u_time* shader_speed;\\n    float waveA = sin(volume+10.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+10.)*0.0075;\\n  if(u_resolution.x <= u_resolution.y){\\n  //divide canvas to 4 columns and distort waveA around them\\n    if(st.x < column_width){\\n        waveA = sin(volume+10.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+10.)*0.0075;\\n    }else if(st.x < (column_width * 2.)){\\n        waveA = sin(volume+12.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+10.)*0.0075;\\n    }else if(st.x < (column_width * 3.)){\\n        waveA = sin(volume+8.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+10.)*0.0075;\\n    }else{\\n        waveA = sin(volume+16.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+10.)*0.0075;\\n    }\\n  }else{\\n    st.x *= u_resolution.x/u_resolution.y;\\n    if(st.x < (column_width )){\\n        waveA = sin(volume+2.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n    }else if(st.x < (column_width * 2.)){\\n        waveA = sin(volume+12.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n    }else if(st.x < (column_width * 3.)){\\n        waveA = sin(volume+8.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n    }else  if(st.x < (column_width *4.)){\\n        waveA = sin(volume+16.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n    }else  if(st.x < (column_width *5.)){\\n        waveA = sin(volume+24.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n   \\n     }else{\\n      waveA = sin(volume+32.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n   \\n    }\\n    //set a debugging script that sends all the values to the console\\n    \\n\\n  }\\n    //draw wave\\n\\n    float pctG =  (plot(st,d,waveA))-0.75;\\n\\n    color =    vec3(pctG * (1.0 / u_color_primary.r),\\n                    pctG * (1.0/ u_color_primary.g), \\n                    pctG * (1.0/ u_color_primary.b)  );\\n\\n    gl_FragColor = vec4(color,1.0);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":2793},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":0}}],"sources":{"js/shaders/shader01_frgmt.glsl":"module.exports=\"#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n#define PI 3.14159265359;\\nuniform vec2 u_resolution;\\nuniform vec2 u_mouse;\\nuniform float u_time;\\n\\nuniform float u_grid_column_width;\\nuniform vec3 u_color_primary;\\nuniform float u_shader_speed;\\n\\nfloat plot(vec2 st, float pct, float volume){\\n  return  smoothstep( pct-volume, pct, 0.25) -\\n          smoothstep( pct, pct+volume, 0.25);\\n}\\n\\nvoid main() {\\n\\n    vec2 st = gl_FragCoord.xy/u_resolution;\\n    vec2 mouse = u_mouse/u_resolution;\\n    float shader_speed = u_shader_speed *0.1;\\n    float column_width = u_grid_column_width;\\n    //convert hexdecimal to hsl:\\n\\n    // draw a circle\\n    float d = distance((0.5-mouse)/st,vec2(0.5));\\n    // Smooth interpolation between 0.1 and 0.9\\n    float y = smoothstep(0.2,0.8,st.x);\\n    vec3 color = vec3(0.);\\n    float volume = 0.5 + \\n    (atan((st.x))* cos(u_time *.0025)+0.025)*\\n     atan(st.y)* 4.0\\n     +u_time* shader_speed;\\n    float waveA = sin(volume+10.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+10.)*0.0075;\\n  if(u_resolution.x <= u_resolution.y){\\n  //divide canvas to 4 columns and distort waveA around them\\n    if(st.x < column_width){\\n        waveA = sin(volume+10.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+10.)*0.0075;\\n    }else if(st.x < (column_width * 2.)){\\n        waveA = sin(volume+12.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+10.)*0.0075;\\n    }else if(st.x < (column_width * 3.)){\\n        waveA = sin(volume+8.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+10.)*0.0075;\\n    }else{\\n        waveA = sin(volume+16.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+10.)*0.0075;\\n    }\\n  }else{\\n    st.x *= u_resolution.x/u_resolution.y;\\n    if(st.x < (column_width )){\\n        waveA = sin(volume+2.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n    }else if(st.x < (column_width * 2.)){\\n        waveA = sin(volume+12.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n    }else if(st.x < (column_width * 3.)){\\n        waveA = sin(volume+8.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n    }else  if(st.x < (column_width *4.)){\\n        waveA = sin(volume+16.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n    }else  if(st.x < (column_width *5.)){\\n        waveA = sin(volume+24.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n   \\n     }else{\\n      waveA = sin(volume+32.)*(mouse.x/mouse.y/0.5)*2.95/ cos(volume+2.)*0.0075;\\n   \\n    }\\n    //set a debugging script that sends all the values to the console\\n    \\n\\n  }\\n    //draw wave\\n\\n    float pctG =  (plot(st,d,waveA))-0.75;\\n\\n    color =    vec3(pctG * (1.0 / u_color_primary.r),\\n                    pctG * (1.0/ u_color_primary.g), \\n                    pctG * (1.0/ u_color_primary.b)  );\\n\\n    gl_FragColor = vec4(color,1.0);\\n}\";"},"lineCount":null}},"error":null,"hash":"36046ee280a10a26c853e0451073552c","cacheData":{"env":{}}}